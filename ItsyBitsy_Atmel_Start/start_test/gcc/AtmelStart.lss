
AtmelStart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000518  00002000  00002000  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000000  20000000  20000000  00002518  2**0
                  CONTENTS
  2 .bss          00000028  20000000  20000000  00010000  2**2
                  ALLOC
  3 .stack        00002000  20000028  20000028  00010000  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00002518  2**0
                  CONTENTS, READONLY
  5 .comment      0000007f  00000000  00000000  00002540  2**0
                  CONTENTS, READONLY
  6 .debug_info   000090bb  00000000  00000000  000025bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001418  00000000  00000000  0000b67a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000ab8  00000000  00000000  0000ca92  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000001e8  00000000  00000000  0000d54a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000388  00000000  00000000  0000d732  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000169d  00000000  00000000  0000daba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00002d6a  00000000  00000000  0000f157  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000330  00000000  00000000  00011ec4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00002000 <exception_table>:
    2000:	28 20 00 20 01 21 00 00 fd 20 00 00 fd 20 00 00     ( . .!... ... ..
	...
    202c:	fd 20 00 00 00 00 00 00 00 00 00 00 fd 20 00 00     . ........... ..
    203c:	fd 20 00 00 fd 20 00 00 fd 20 00 00 fd 20 00 00     . ... ... ... ..
    204c:	fd 20 00 00 61 22 00 00 fd 20 00 00 fd 20 00 00     . ..a"... ... ..
    205c:	fd 20 00 00 fd 20 00 00 fd 20 00 00 fd 20 00 00     . ... ... ... ..
    206c:	fd 20 00 00 fd 20 00 00 fd 20 00 00 fd 20 00 00     . ... ... ... ..
    207c:	fd 20 00 00 fd 20 00 00 fd 20 00 00 fd 20 00 00     . ... ... ... ..
    208c:	fd 20 00 00 fd 20 00 00 00 00 00 00 00 00 00 00     . ... ..........
    209c:	fd 20 00 00 fd 20 00 00 fd 20 00 00 fd 20 00 00     . ... ... ... ..
    20ac:	fd 20 00 00 00 00 00 00                             . ......

000020b4 <__do_global_dtors_aux>:
    20b4:	b510      	push	{r4, lr}
    20b6:	4c06      	ldr	r4, [pc, #24]	; (20d0 <__do_global_dtors_aux+0x1c>)
    20b8:	7823      	ldrb	r3, [r4, #0]
    20ba:	2b00      	cmp	r3, #0
    20bc:	d107      	bne.n	20ce <__do_global_dtors_aux+0x1a>
    20be:	4b05      	ldr	r3, [pc, #20]	; (20d4 <__do_global_dtors_aux+0x20>)
    20c0:	2b00      	cmp	r3, #0
    20c2:	d002      	beq.n	20ca <__do_global_dtors_aux+0x16>
    20c4:	4804      	ldr	r0, [pc, #16]	; (20d8 <__do_global_dtors_aux+0x24>)
    20c6:	e000      	b.n	20ca <__do_global_dtors_aux+0x16>
    20c8:	bf00      	nop
    20ca:	2301      	movs	r3, #1
    20cc:	7023      	strb	r3, [r4, #0]
    20ce:	bd10      	pop	{r4, pc}
    20d0:	20000000 	.word	0x20000000
    20d4:	00000000 	.word	0x00000000
    20d8:	00002518 	.word	0x00002518

000020dc <frame_dummy>:
    20dc:	4b04      	ldr	r3, [pc, #16]	; (20f0 <frame_dummy+0x14>)
    20de:	b510      	push	{r4, lr}
    20e0:	2b00      	cmp	r3, #0
    20e2:	d003      	beq.n	20ec <frame_dummy+0x10>
    20e4:	4903      	ldr	r1, [pc, #12]	; (20f4 <frame_dummy+0x18>)
    20e6:	4804      	ldr	r0, [pc, #16]	; (20f8 <frame_dummy+0x1c>)
    20e8:	e000      	b.n	20ec <frame_dummy+0x10>
    20ea:	bf00      	nop
    20ec:	bd10      	pop	{r4, pc}
    20ee:	46c0      	nop			; (mov r8, r8)
    20f0:	00000000 	.word	0x00000000
    20f4:	20000004 	.word	0x20000004
    20f8:	00002518 	.word	0x00002518

000020fc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    20fc:	e7fe      	b.n	20fc <Dummy_Handler>
	...

00002100 <Reset_Handler>:
	if (pSrc != pDest) {
    2100:	4821      	ldr	r0, [pc, #132]	; (2188 <Reset_Handler+0x88>)
    2102:	4922      	ldr	r1, [pc, #136]	; (218c <Reset_Handler+0x8c>)
{
    2104:	b570      	push	{r4, r5, r6, lr}
    2106:	2300      	movs	r3, #0
	if (pSrc != pDest) {
    2108:	4288      	cmp	r0, r1
    210a:	d135      	bne.n	2178 <Reset_Handler+0x78>
		*pDest++ = 0;
    210c:	2100      	movs	r1, #0
    210e:	4b20      	ldr	r3, [pc, #128]	; (2190 <Reset_Handler+0x90>)
	for (pDest = &_szero; pDest < &_ezero;) {
    2110:	4a20      	ldr	r2, [pc, #128]	; (2194 <Reset_Handler+0x94>)
    2112:	4293      	cmp	r3, r2
    2114:	d335      	bcc.n	2182 <Reset_Handler+0x82>
	SCB->VTOR = ((uint32_t)pSrc & SCB_VTOR_TBLOFF_Msk);
    2116:	22ff      	movs	r2, #255	; 0xff
    2118:	4b1f      	ldr	r3, [pc, #124]	; (2198 <Reset_Handler+0x98>)
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    211a:	2103      	movs	r1, #3
	SCB->VTOR = ((uint32_t)pSrc & SCB_VTOR_TBLOFF_Msk);
    211c:	4393      	bics	r3, r2
    211e:	4a1f      	ldr	r2, [pc, #124]	; (219c <Reset_Handler+0x9c>)
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2120:	250c      	movs	r5, #12
	SCB->VTOR = ((uint32_t)pSrc & SCB_VTOR_TBLOFF_Msk);
    2122:	6093      	str	r3, [r2, #8]
	SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    2124:	2202      	movs	r2, #2
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2126:	2408      	movs	r4, #8
	DMAC->QOSCTRL.bit.DQOS   = 2;
    2128:	2630      	movs	r6, #48	; 0x30
	SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    212a:	4b1d      	ldr	r3, [pc, #116]	; (21a0 <Reset_Handler+0xa0>)
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    212c:	481d      	ldr	r0, [pc, #116]	; (21a4 <Reset_Handler+0xa4>)
	SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    212e:	625a      	str	r2, [r3, #36]	; 0x24
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2130:	78c3      	ldrb	r3, [r0, #3]
    2132:	438b      	bics	r3, r1
    2134:	4313      	orrs	r3, r2
    2136:	70c3      	strb	r3, [r0, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2138:	78c3      	ldrb	r3, [r0, #3]
    213a:	43ab      	bics	r3, r5
    213c:	4323      	orrs	r3, r4
    213e:	70c3      	strb	r3, [r0, #3]
	DMAC->QOSCTRL.bit.DQOS   = 2;
    2140:	4b19      	ldr	r3, [pc, #100]	; (21a8 <Reset_Handler+0xa8>)
    2142:	7b98      	ldrb	r0, [r3, #14]
    2144:	43b0      	bics	r0, r6
    2146:	0006      	movs	r6, r0
    2148:	2020      	movs	r0, #32
    214a:	4330      	orrs	r0, r6
    214c:	7398      	strb	r0, [r3, #14]
	DMAC->QOSCTRL.bit.FQOS   = 2;
    214e:	7b98      	ldrb	r0, [r3, #14]
    2150:	43a8      	bics	r0, r5
    2152:	4304      	orrs	r4, r0
    2154:	739c      	strb	r4, [r3, #14]
	DMAC->QOSCTRL.bit.WRBQOS = 2;
    2156:	7b98      	ldrb	r0, [r3, #14]
    2158:	4388      	bics	r0, r1
    215a:	4302      	orrs	r2, r0
    215c:	739a      	strb	r2, [r3, #14]
	NVMCTRL->CTRLB.bit.MANW = 1;
    215e:	2380      	movs	r3, #128	; 0x80
    2160:	4a12      	ldr	r2, [pc, #72]	; (21ac <Reset_Handler+0xac>)
    2162:	6851      	ldr	r1, [r2, #4]
    2164:	430b      	orrs	r3, r1
    2166:	6053      	str	r3, [r2, #4]
	__libc_init_array();
    2168:	4b11      	ldr	r3, [pc, #68]	; (21b0 <Reset_Handler+0xb0>)
    216a:	4798      	blx	r3
	main();
    216c:	4b11      	ldr	r3, [pc, #68]	; (21b4 <Reset_Handler+0xb4>)
    216e:	4798      	blx	r3
    2170:	e7fe      	b.n	2170 <Reset_Handler+0x70>
			*pDest++ = *pSrc++;
    2172:	58c4      	ldr	r4, [r0, r3]
    2174:	3304      	adds	r3, #4
    2176:	6014      	str	r4, [r2, #0]
		for (; pDest < &_erelocate;) {
    2178:	4c0f      	ldr	r4, [pc, #60]	; (21b8 <Reset_Handler+0xb8>)
    217a:	18ca      	adds	r2, r1, r3
    217c:	42a2      	cmp	r2, r4
    217e:	d3f8      	bcc.n	2172 <Reset_Handler+0x72>
    2180:	e7c4      	b.n	210c <Reset_Handler+0xc>
		*pDest++ = 0;
    2182:	c302      	stmia	r3!, {r1}
    2184:	e7c5      	b.n	2112 <Reset_Handler+0x12>
    2186:	46c0      	nop			; (mov r8, r8)
    2188:	00002518 	.word	0x00002518
    218c:	20000000 	.word	0x20000000
    2190:	20000000 	.word	0x20000000
    2194:	20000028 	.word	0x20000028
    2198:	00002000 	.word	0x00002000
    219c:	e000ed00 	.word	0xe000ed00
    21a0:	410070fc 	.word	0x410070fc
    21a4:	41005000 	.word	0x41005000
    21a8:	41004800 	.word	0x41004800
    21ac:	41004000 	.word	0x41004000
    21b0:	00002499 	.word	0x00002499
    21b4:	0000236d 	.word	0x0000236d
    21b8:	20000000 	.word	0x20000000

000021bc <hri_eic_wait_for_sync.constprop.4>:
typedef uint8_t  hri_eic_nmiflag_reg_t;
typedef uint8_t  hri_eic_status_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw)
{
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    21bc:	4a02      	ldr	r2, [pc, #8]	; (21c8 <hri_eic_wait_for_sync.constprop.4+0xc>)
    21be:	7853      	ldrb	r3, [r2, #1]
    21c0:	09db      	lsrs	r3, r3, #7
    21c2:	d1fc      	bne.n	21be <hri_eic_wait_for_sync.constprop.4+0x2>
		;
}
    21c4:	4770      	bx	lr
    21c6:	46c0      	nop			; (mov r8, r8)
    21c8:	40001800 	.word	0x40001800

000021cc <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    21cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

static inline hri_eic_ctrl_reg_t hri_eic_get_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw);
	tmp = ((Eic *)hw)->CTRL.reg;
    21ce:	4c16      	ldr	r4, [pc, #88]	; (2228 <_ext_irq_init+0x5c>)
	hri_eic_wait_for_sync(EIC);
    21d0:	4d16      	ldr	r5, [pc, #88]	; (222c <_ext_irq_init+0x60>)
{
    21d2:	0007      	movs	r7, r0
	hri_eic_wait_for_sync(EIC);
    21d4:	47a8      	blx	r5
	hri_eic_wait_for_sync(hw);
    21d6:	47a8      	blx	r5
	tmp = ((Eic *)hw)->CTRL.reg;
    21d8:	7823      	ldrb	r3, [r4, #0]
	// #define EIC_CTRL_ENABLE_Pos         1            /**< \brief (EIC_CTRL) Enable */
	// #define EIC_CTRL_ENABLE             (_U_(0x1) << EIC_CTRL_ENABLE_Pos)
	// If the EIC module is running...
	if (hri_eic_get_CTRL_reg(EIC, EIC_CTRL_ENABLE)) {
    21da:	079b      	lsls	r3, r3, #30
    21dc:	d503      	bpl.n	21e6 <_ext_irq_init+0x1a>
}

static inline void hri_eic_write_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	hri_eic_wait_for_sync(hw);
    21de:	47a8      	blx	r5
	((Eic *)hw)->CTRL.reg = data;
    21e0:	2300      	movs	r3, #0
    21e2:	7023      	strb	r3, [r4, #0]
		// Turn it off.
		hri_eic_write_CTRL_reg(EIC, 0);
		hri_eic_wait_for_sync(EIC);
    21e4:	47a8      	blx	r5
	hri_eic_wait_for_sync(hw);
    21e6:	47a8      	blx	r5
	((Eic *)hw)->CTRL.reg = data;
    21e8:	2301      	movs	r3, #1
    21ea:	7023      	strb	r3, [r4, #0]
	}
	//Reset the EIC module by setting the Software Reset bit
	hri_eic_write_CTRL_reg(EIC, EIC_CTRL_SWRST);
	hri_eic_wait_for_sync(EIC);
    21ec:	47a8      	blx	r5
}

static inline void hri_eic_write_WAKEUP_reg(const void *const hw, hri_eic_wakeup_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->WAKEUP.reg = data;
    21ee:	2308      	movs	r3, #8
    21f0:	6163      	str	r3, [r4, #20]
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    21f2:	2380      	movs	r3, #128	; 0x80
    21f4:	2600      	movs	r6, #0
    21f6:	01db      	lsls	r3, r3, #7
    21f8:	61a3      	str	r3, [r4, #24]
    21fa:	61e6      	str	r6, [r4, #28]
	hri_eic_wait_for_sync(hw);
    21fc:	47a8      	blx	r5
	((Eic *)hw)->CTRL.reg |= EIC_CTRL_ENABLE;
    21fe:	2302      	movs	r3, #2
    2200:	7822      	ldrb	r2, [r4, #0]
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2202:	490b      	ldr	r1, [pc, #44]	; (2230 <_ext_irq_init+0x64>)
    2204:	4313      	orrs	r3, r2
    2206:	7023      	strb	r3, [r4, #0]
    2208:	2310      	movs	r3, #16
    220a:	4a0a      	ldr	r2, [pc, #40]	; (2234 <_ext_irq_init+0x68>)
    220c:	67cb      	str	r3, [r1, #124]	; 0x7c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    220e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2212:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2216:	21c0      	movs	r1, #192	; 0xc0
    2218:	0049      	lsls	r1, r1, #1
    221a:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    221c:	6013      	str	r3, [r2, #0]
  // Tell NVIC to let traffic from the EIC module through.
	NVIC_DisableIRQ(EIC_IRQn);
	NVIC_ClearPendingIRQ(EIC_IRQn);
	NVIC_EnableIRQ(EIC_IRQn);

	callback = cb;
    221e:	4b06      	ldr	r3, [pc, #24]	; (2238 <_ext_irq_init+0x6c>)

	return ERR_NONE;
}
    2220:	0030      	movs	r0, r6
	callback = cb;
    2222:	601f      	str	r7, [r3, #0]
}
    2224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2226:	46c0      	nop			; (mov r8, r8)
    2228:	40001800 	.word	0x40001800
    222c:	000021bd 	.word	0x000021bd
    2230:	e000e104 	.word	0xe000e104
    2234:	e000e100 	.word	0xe000e100
    2238:	2000001c 	.word	0x2000001c

0000223c <_ext_irq_enable>:
{
	uint8_t extint = INVALID_EXTINT_NUMBER;
	uint8_t i      = 0;

	for (; i < ARRAY_SIZE(_map); i++) {
		if (_map[i].pin == pin) {
    223c:	2813      	cmp	r0, #19
    223e:	d005      	beq.n	224c <_ext_irq_enable+0x10>
			extint = _map[i].extint;
			break;
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
		return ERR_INVALID_ARG;
    2240:	200d      	movs	r0, #13
    2242:	4240      	negs	r0, r0
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
	}

	return ERR_NONE;
}
    2244:	4770      	bx	lr
	((Eic *)hw)->INTENCLR.reg = mask;
    2246:	609a      	str	r2, [r3, #8]
	((Eic *)hw)->INTFLAG.reg = mask;
    2248:	611a      	str	r2, [r3, #16]
    224a:	e004      	b.n	2256 <_ext_irq_enable+0x1a>
    224c:	4b03      	ldr	r3, [pc, #12]	; (225c <_ext_irq_enable+0x20>)
    224e:	2208      	movs	r2, #8
	if (enable) {
    2250:	2900      	cmp	r1, #0
    2252:	d0f8      	beq.n	2246 <_ext_irq_enable+0xa>
	((Eic *)hw)->INTENSET.reg = mask;
    2254:	60da      	str	r2, [r3, #12]
	return ERR_NONE;
    2256:	2000      	movs	r0, #0
    2258:	e7f4      	b.n	2244 <_ext_irq_enable+0x8>
    225a:	46c0      	nop			; (mov r8, r8)
    225c:	40001800 	.word	0x40001800

00002260 <EIC_Handler>:
 * \brief EIC interrupt handler
 * THIS IS GENERICALLY MESSY...then I had a problem because flags is reset...
 * which seems to put this thing in a never ending loop.
 */
void EIC_Handler(void)
{
    2260:	b513      	push	{r0, r1, r4, lr}
	return ((Eic *)hw)->INTFLAG.reg;
    2262:	4b0a      	ldr	r3, [pc, #40]	; (228c <EIC_Handler+0x2c>)
	//int8_t            pos;
	//uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);

	ASSERT(callback);
    2264:	4c0a      	ldr	r4, [pc, #40]	; (2290 <EIC_Handler+0x30>)
    2266:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
    2268:	68d9      	ldr	r1, [r3, #12]
    226a:	6820      	ldr	r0, [r4, #0]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
    226c:	400a      	ands	r2, r1
    226e:	9201      	str	r2, [sp, #4]
	hri_eic_clear_INTFLAG_reg(EIC, flags);
    2270:	9a01      	ldr	r2, [sp, #4]
	ASSERT(callback);
    2272:	4908      	ldr	r1, [pc, #32]	; (2294 <EIC_Handler+0x34>)
	((Eic *)hw)->INTFLAG.reg = mask;
    2274:	611a      	str	r2, [r3, #16]
    2276:	1e43      	subs	r3, r0, #1
    2278:	4198      	sbcs	r0, r3
    227a:	22c5      	movs	r2, #197	; 0xc5
    227c:	b2c0      	uxtb	r0, r0
    227e:	4b06      	ldr	r3, [pc, #24]	; (2298 <EIC_Handler+0x38>)
    2280:	4798      	blx	r3
	// pin turns out to be 19

	callback(PA19);
    2282:	6823      	ldr	r3, [r4, #0]
    2284:	2013      	movs	r0, #19
    2286:	4798      	blx	r3
		// 	flags &= ~(1ul << pos);
		// 	pos = ffs(flags) - 1;
		// }

	// }
}
    2288:	bd13      	pop	{r0, r1, r4, pc}
    228a:	46c0      	nop			; (mov r8, r8)
    228c:	40001800 	.word	0x40001800
    2290:	2000001c 	.word	0x2000001c
    2294:	000024e0 	.word	0x000024e0
    2298:	000022f1 	.word	0x000022f1

0000229c <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    229c:	4b06      	ldr	r3, [pc, #24]	; (22b8 <_pm_init+0x1c>)
    229e:	7a1a      	ldrb	r2, [r3, #8]
    22a0:	b2d2      	uxtb	r2, r2
    22a2:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    22a4:	7a5a      	ldrb	r2, [r3, #9]
    22a6:	b2d2      	uxtb	r2, r2
    22a8:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    22aa:	7a9a      	ldrb	r2, [r3, #10]
    22ac:	b2d2      	uxtb	r2, r2
    22ae:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    22b0:	7ada      	ldrb	r2, [r3, #11]
    22b2:	b2d2      	uxtb	r2, r2
    22b4:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
    22b6:	4770      	bx	lr
    22b8:	40000400 	.word	0x40000400

000022bc <_init_chip>:
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    22bc:	4b07      	ldr	r3, [pc, #28]	; (22dc <_init_chip+0x20>)

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    22be:	b510      	push	{r4, lr}
    22c0:	685a      	ldr	r2, [r3, #4]
    22c2:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
    22c4:	4b06      	ldr	r3, [pc, #24]	; (22e0 <_init_chip+0x24>)
    22c6:	4798      	blx	r3
	_sysctrl_init_sources();
    22c8:	4b06      	ldr	r3, [pc, #24]	; (22e4 <_init_chip+0x28>)
    22ca:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    22cc:	2008      	movs	r0, #8
    22ce:	4c06      	ldr	r4, [pc, #24]	; (22e8 <_init_chip+0x2c>)
    22d0:	47a0      	blx	r4
#endif
	_sysctrl_init_referenced_generators();
    22d2:	4b06      	ldr	r3, [pc, #24]	; (22ec <_init_chip+0x30>)
    22d4:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    22d6:	20f7      	movs	r0, #247	; 0xf7
    22d8:	47a0      	blx	r4
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
    22da:	bd10      	pop	{r4, pc}
    22dc:	41004000 	.word	0x41004000
    22e0:	0000229d 	.word	0x0000229d
    22e4:	000022f9 	.word	0x000022f9
    22e8:	00002349 	.word	0x00002349
    22ec:	00002339 	.word	0x00002339

000022f0 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    22f0:	2800      	cmp	r0, #0
    22f2:	d100      	bne.n	22f6 <assert+0x6>
		__asm("BKPT #0");
    22f4:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    22f6:	4770      	bx	lr

000022f8 <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    22f8:	4b0d      	ldr	r3, [pc, #52]	; (2330 <_sysctrl_init_sources+0x38>)
    22fa:	6a1a      	ldr	r2, [r3, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    22fc:	6a19      	ldr	r1, [r3, #32]
	tmp = (tmp & SYSCTRL_OSC8M_CALIB_Msk) >> SYSCTRL_OSC8M_CALIB_Pos;
    22fe:	0112      	lsls	r2, r2, #4

#if CONF_OSC8M_CONFIG == 1
	calib = hri_sysctrl_read_OSC8M_CALIB_bf(hw);

	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    2300:	0f89      	lsrs	r1, r1, #30
    2302:	0788      	lsls	r0, r1, #30
	hri_sysctrl_write_OSC8M_reg(hw,
    2304:	490b      	ldr	r1, [pc, #44]	; (2334 <_sysctrl_init_sources+0x3c>)
    2306:	0d12      	lsrs	r2, r2, #20
    2308:	4301      	orrs	r1, r0
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    230a:	0410      	lsls	r0, r2, #16
	hri_sysctrl_write_OSC8M_reg(hw,
    230c:	4301      	orrs	r1, r0
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    230e:	6219      	str	r1, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    2310:	2102      	movs	r1, #2
    2312:	6998      	ldr	r0, [r3, #24]
    2314:	4301      	orrs	r1, r0
    2316:	6199      	str	r1, [r3, #24]
	/* Enable OSC32K anyway since GCLK configuration may need it to sync */
	hri_sysctrl_set_OSC32K_ENABLE_bit(hw);
#endif

#if CONF_OSCULP32K_CONFIG == 1
	hri_sysctrl_write_OSCULP32K_reg(hw,
    2318:	211f      	movs	r1, #31
    231a:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    231c:	771a      	strb	r2, [r3, #28]
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    231e:	2208      	movs	r2, #8
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    2320:	68d9      	ldr	r1, [r3, #12]
    2322:	4211      	tst	r1, r2
    2324:	d0fc      	beq.n	2320 <_sysctrl_init_sources+0x28>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    2326:	2280      	movs	r2, #128	; 0x80
    2328:	6a19      	ldr	r1, [r3, #32]
    232a:	430a      	orrs	r2, r1
    232c:	621a      	str	r2, [r3, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    232e:	4770      	bx	lr
    2330:	40000800 	.word	0x40000800
    2334:	00000302 	.word	0x00000302

00002338 <_sysctrl_init_referenced_generators>:
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    2338:	2102      	movs	r1, #2
    233a:	4a02      	ldr	r2, [pc, #8]	; (2344 <_sysctrl_init_referenced_generators+0xc>)
    233c:	6993      	ldr	r3, [r2, #24]
    233e:	438b      	bics	r3, r1
    2340:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    2342:	4770      	bx	lr
    2344:	40000800 	.word	0x40000800

00002348 <_gclk_init_generators_by_fref>:
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
#if CONF_GCLK_GEN_0_GENEN == 1
	if (bm & (1ul << 0)) {
    2348:	07c3      	lsls	r3, r0, #31
    234a:	d508      	bpl.n	235e <_gclk_init_generators_by_fref+0x16>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
    234c:	2280      	movs	r2, #128	; 0x80
    234e:	4b04      	ldr	r3, [pc, #16]	; (2360 <_gclk_init_generators_by_fref+0x18>)
    2350:	0052      	lsls	r2, r2, #1
    2352:	609a      	str	r2, [r3, #8]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    2354:	785a      	ldrb	r2, [r3, #1]
    2356:	09d2      	lsrs	r2, r2, #7
    2358:	d1fc      	bne.n	2354 <_gclk_init_generators_by_fref+0xc>
	((Gclk *)hw)->GENCTRL.reg = data;
    235a:	4a02      	ldr	r2, [pc, #8]	; (2364 <_gclk_init_generators_by_fref+0x1c>)
    235c:	605a      	str	r2, [r3, #4]
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GEN_8_GENEN << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
    235e:	4770      	bx	lr
    2360:	40000c00 	.word	0x40000c00
    2364:	00210600 	.word	0x00210600

00002368 <cb_eic_extint3>:
	// gunk...checking if can set bp.
	uint8_t i,j;
	i = 5;
	j = i + 3;
	i = j + i;
}
    2368:	4770      	bx	lr
	...

0000236c <main>:
int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    236c:	4b03      	ldr	r3, [pc, #12]	; (237c <main+0x10>)
{
    236e:	b510      	push	{r4, lr}
	atmel_start_init();
    2370:	4798      	blx	r3
  ext_irq_register(PIN_PA19,cb_eic_extint3);
    2372:	4903      	ldr	r1, [pc, #12]	; (2380 <main+0x14>)
    2374:	2013      	movs	r0, #19
    2376:	4b03      	ldr	r3, [pc, #12]	; (2384 <main+0x18>)
    2378:	4798      	blx	r3
    237a:	e7fe      	b.n	237a <main+0xe>
    237c:	0000248d 	.word	0x0000248d
    2380:	00002369 	.word	0x00002369
    2384:	00002455 	.word	0x00002455

00002388 <EXTERNAL_IRQ_0_init>:
	((Gclk *)hw)->CLKCTRL.reg = data;
    2388:	4b10      	ldr	r3, [pc, #64]	; (23cc <EXTERNAL_IRQ_0_init+0x44>)
    238a:	4a11      	ldr	r2, [pc, #68]	; (23d0 <EXTERNAL_IRQ_0_init+0x48>)
#include <hal_init.h>
#include <hpl_gclk_base.h>
#include <hpl_pm_base.h>

void EXTERNAL_IRQ_0_init(void)
{
    238c:	b510      	push	{r4, lr}
    238e:	805a      	strh	r2, [r3, #2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2390:	23c0      	movs	r3, #192	; 0xc0
    2392:	2280      	movs	r2, #128	; 0x80
    2394:	05db      	lsls	r3, r3, #23
    2396:	0312      	lsls	r2, r2, #12
    2398:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    239a:	4b0e      	ldr	r3, [pc, #56]	; (23d4 <EXTERNAL_IRQ_0_init+0x4c>)
    239c:	4a0e      	ldr	r2, [pc, #56]	; (23d8 <EXTERNAL_IRQ_0_init+0x50>)
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    239e:	2004      	movs	r0, #4
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    23a0:	629a      	str	r2, [r3, #40]	; 0x28
    23a2:	4a0e      	ldr	r2, [pc, #56]	; (23dc <EXTERNAL_IRQ_0_init+0x54>)
    23a4:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    23a6:	001a      	movs	r2, r3
    23a8:	3253      	adds	r2, #83	; 0x53
    23aa:	7811      	ldrb	r1, [r2, #0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    23ac:	3339      	adds	r3, #57	; 0x39
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    23ae:	4381      	bics	r1, r0
    23b0:	7011      	strb	r1, [r2, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    23b2:	2101      	movs	r1, #1
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    23b4:	7810      	ldrb	r0, [r2, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    23b6:	4388      	bics	r0, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    23b8:	4301      	orrs	r1, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    23ba:	7011      	strb	r1, [r2, #0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    23bc:	210f      	movs	r1, #15
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    23be:	781a      	ldrb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    23c0:	400a      	ands	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    23c2:	701a      	strb	r2, [r3, #0]
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA19, PINMUX_PA19A_EIC_EXTINT3);

	ext_irq_init();
    23c4:	4b06      	ldr	r3, [pc, #24]	; (23e0 <EXTERNAL_IRQ_0_init+0x58>)
    23c6:	4798      	blx	r3
}
    23c8:	bd10      	pop	{r4, pc}
    23ca:	46c0      	nop			; (mov r8, r8)
    23cc:	40000c00 	.word	0x40000c00
    23d0:	00004005 	.word	0x00004005
    23d4:	41004400 	.word	0x41004400
    23d8:	40020000 	.word	0x40020000
    23dc:	c0020008 	.word	0xc0020008
    23e0:	00002431 	.word	0x00002431

000023e4 <system_init>:

void system_init(void)
{
    23e4:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    23e6:	4b02      	ldr	r3, [pc, #8]	; (23f0 <system_init+0xc>)
    23e8:	4798      	blx	r3
	init_mcu();

	EXTERNAL_IRQ_0_init();
    23ea:	4b02      	ldr	r3, [pc, #8]	; (23f4 <system_init+0x10>)
    23ec:	4798      	blx	r3
}
    23ee:	bd10      	pop	{r4, pc}
    23f0:	000022bd 	.word	0x000022bd
    23f4:	00002389 	.word	0x00002389

000023f8 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    23f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    23fa:	2301      	movs	r3, #1
    23fc:	2200      	movs	r2, #0
			}
			return;
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
    23fe:	001e      	movs	r6, r3
		} else {
			upper = middle - 1;
    2400:	27ff      	movs	r7, #255	; 0xff
		if (ext_irqs[middle].pin == pin) {
    2402:	4d0a      	ldr	r5, [pc, #40]	; (242c <process_ext_irq+0x34>)
    2404:	686c      	ldr	r4, [r5, #4]
	while (upper >= lower) {
    2406:	4293      	cmp	r3, r2
    2408:	d308      	bcc.n	241c <process_ext_irq+0x24>
		middle = (upper + lower) >> 1;
    240a:	1899      	adds	r1, r3, r2
    240c:	1049      	asrs	r1, r1, #1
		if (middle >= EXT_IRQ_AMOUNT) {
    240e:	d105      	bne.n	241c <process_ext_irq+0x24>
		if (ext_irqs[middle].pin == pin) {
    2410:	4284      	cmp	r4, r0
    2412:	d104      	bne.n	241e <process_ext_irq+0x26>
			if (ext_irqs[middle].cb) {
    2414:	682b      	ldr	r3, [r5, #0]
    2416:	2b00      	cmp	r3, #0
    2418:	d000      	beq.n	241c <process_ext_irq+0x24>
				ext_irqs[middle].cb();
    241a:	4798      	blx	r3
		}
	}
}
    241c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (ext_irqs[middle].pin < pin) {
    241e:	4284      	cmp	r4, r0
    2420:	d301      	bcc.n	2426 <process_ext_irq+0x2e>
			upper = middle - 1;
    2422:	003b      	movs	r3, r7
    2424:	e7ef      	b.n	2406 <process_ext_irq+0xe>
			lower = middle + 1;
    2426:	0032      	movs	r2, r6
    2428:	e7ed      	b.n	2406 <process_ext_irq+0xe>
    242a:	46c0      	nop			; (mov r8, r8)
    242c:	20000020 	.word	0x20000020

00002430 <ext_irq_init>:
		ext_irqs[i].pin = 0xFFFFFFFF;
    2430:	2201      	movs	r2, #1
    2432:	4b05      	ldr	r3, [pc, #20]	; (2448 <ext_irq_init+0x18>)
    2434:	4252      	negs	r2, r2
{
    2436:	b510      	push	{r4, lr}
		ext_irqs[i].pin = 0xFFFFFFFF;
    2438:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    243a:	2200      	movs	r2, #0
	return _ext_irq_init(process_ext_irq);
    243c:	4803      	ldr	r0, [pc, #12]	; (244c <ext_irq_init+0x1c>)
		ext_irqs[i].cb  = NULL;
    243e:	601a      	str	r2, [r3, #0]
	return _ext_irq_init(process_ext_irq);
    2440:	4b03      	ldr	r3, [pc, #12]	; (2450 <ext_irq_init+0x20>)
    2442:	4798      	blx	r3
}
    2444:	bd10      	pop	{r4, pc}
    2446:	46c0      	nop			; (mov r8, r8)
    2448:	20000020 	.word	0x20000020
    244c:	000023f9 	.word	0x000023f9
    2450:	000021cd 	.word	0x000021cd

00002454 <ext_irq_register>:
		if (ext_irqs[i].pin == pin) {
    2454:	4b0b      	ldr	r3, [pc, #44]	; (2484 <ext_irq_register+0x30>)
{
    2456:	b510      	push	{r4, lr}
		if (ext_irqs[i].pin == pin) {
    2458:	685a      	ldr	r2, [r3, #4]
    245a:	4282      	cmp	r2, r0
    245c:	d10d      	bne.n	247a <ext_irq_register+0x26>
			ext_irqs[i].cb = cb;
    245e:	6019      	str	r1, [r3, #0]
	if (NULL == cb) {
    2460:	2900      	cmp	r1, #0
    2462:	d108      	bne.n	2476 <ext_irq_register+0x22>
		return _ext_irq_enable(pin, false);
    2464:	0010      	movs	r0, r2
	return _ext_irq_enable(pin, true);
    2466:	4b08      	ldr	r3, [pc, #32]	; (2488 <ext_irq_register+0x34>)
    2468:	4798      	blx	r3
}
    246a:	bd10      	pop	{r4, pc}
			if (NULL == ext_irqs[i].cb) {
    246c:	681a      	ldr	r2, [r3, #0]
    246e:	2a00      	cmp	r2, #0
    2470:	d105      	bne.n	247e <ext_irq_register+0x2a>
				ext_irqs[i].cb  = cb;
    2472:	6019      	str	r1, [r3, #0]
				ext_irqs[i].pin = pin;
    2474:	6058      	str	r0, [r3, #4]
	return _ext_irq_enable(pin, true);
    2476:	2101      	movs	r1, #1
    2478:	e7f5      	b.n	2466 <ext_irq_register+0x12>
	if (NULL == cb) {
    247a:	2900      	cmp	r1, #0
    247c:	d1f6      	bne.n	246c <ext_irq_register+0x18>
		return ERR_INVALID_ARG;
    247e:	200d      	movs	r0, #13
    2480:	4240      	negs	r0, r0
    2482:	e7f2      	b.n	246a <ext_irq_register+0x16>
    2484:	20000020 	.word	0x20000020
    2488:	0000223d 	.word	0x0000223d

0000248c <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    248c:	b510      	push	{r4, lr}
	system_init();
    248e:	4b01      	ldr	r3, [pc, #4]	; (2494 <atmel_start_init+0x8>)
    2490:	4798      	blx	r3
}
    2492:	bd10      	pop	{r4, pc}
    2494:	000023e5 	.word	0x000023e5

00002498 <__libc_init_array>:
    2498:	b570      	push	{r4, r5, r6, lr}
    249a:	2600      	movs	r6, #0
    249c:	4d0c      	ldr	r5, [pc, #48]	; (24d0 <__libc_init_array+0x38>)
    249e:	4c0d      	ldr	r4, [pc, #52]	; (24d4 <__libc_init_array+0x3c>)
    24a0:	1b64      	subs	r4, r4, r5
    24a2:	10a4      	asrs	r4, r4, #2
    24a4:	42a6      	cmp	r6, r4
    24a6:	d109      	bne.n	24bc <__libc_init_array+0x24>
    24a8:	2600      	movs	r6, #0
    24aa:	f000 f825 	bl	24f8 <_init>
    24ae:	4d0a      	ldr	r5, [pc, #40]	; (24d8 <__libc_init_array+0x40>)
    24b0:	4c0a      	ldr	r4, [pc, #40]	; (24dc <__libc_init_array+0x44>)
    24b2:	1b64      	subs	r4, r4, r5
    24b4:	10a4      	asrs	r4, r4, #2
    24b6:	42a6      	cmp	r6, r4
    24b8:	d105      	bne.n	24c6 <__libc_init_array+0x2e>
    24ba:	bd70      	pop	{r4, r5, r6, pc}
    24bc:	00b3      	lsls	r3, r6, #2
    24be:	58eb      	ldr	r3, [r5, r3]
    24c0:	4798      	blx	r3
    24c2:	3601      	adds	r6, #1
    24c4:	e7ee      	b.n	24a4 <__libc_init_array+0xc>
    24c6:	00b3      	lsls	r3, r6, #2
    24c8:	58eb      	ldr	r3, [r5, r3]
    24ca:	4798      	blx	r3
    24cc:	3601      	adds	r6, #1
    24ce:	e7f2      	b.n	24b6 <__libc_init_array+0x1e>
    24d0:	00002504 	.word	0x00002504
    24d4:	00002504 	.word	0x00002504
    24d8:	00002504 	.word	0x00002504
    24dc:	00002508 	.word	0x00002508
    24e0:	682f2e2e 	.word	0x682f2e2e
    24e4:	652f6c70 	.word	0x652f6c70
    24e8:	682f6369 	.word	0x682f6369
    24ec:	655f6c70 	.word	0x655f6c70
    24f0:	632e6369 	.word	0x632e6369
    24f4:	00000000 	.word	0x00000000

000024f8 <_init>:
    24f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    24fa:	46c0      	nop			; (mov r8, r8)
    24fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    24fe:	bc08      	pop	{r3}
    2500:	469e      	mov	lr, r3
    2502:	4770      	bx	lr

00002504 <__init_array_start>:
    2504:	000020dd 	.word	0x000020dd

00002508 <_fini>:
    2508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    250a:	46c0      	nop			; (mov r8, r8)
    250c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    250e:	bc08      	pop	{r3}
    2510:	469e      	mov	lr, r3
    2512:	4770      	bx	lr

00002514 <__fini_array_start>:
    2514:	000020b5 	.word	0x000020b5
