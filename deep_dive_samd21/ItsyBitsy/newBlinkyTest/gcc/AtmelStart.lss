
AtmelStart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000424  00002000  00002000  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000000  20000000  20000000  00002424  2**0
                  CONTENTS
  2 .bss          00000020  20000000  20000000  00010000  2**2
                  ALLOC
  3 .stack        00002000  20000020  20000020  00010000  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00002424  2**0
                  CONTENTS, READONLY
  5 .comment      0000007f  00000000  00000000  0000244c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00007f6a  00000000  00000000  000024cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001467  00000000  00000000  0000a435  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000800  00000000  00000000  0000b89c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000220  00000000  00000000  0000c09c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000002a0  00000000  00000000  0000c2bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001643  00000000  00000000  0000c55c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000258b  00000000  00000000  0000db9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000390  00000000  00000000  0001012c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00002000 <exception_table>:
    2000:	20 20 00 20 55 21 00 00 51 21 00 00 51 21 00 00       . U!..Q!..Q!..
	...
    202c:	51 21 00 00 00 00 00 00 00 00 00 00 51 21 00 00     Q!..........Q!..
    203c:	51 21 00 00 51 21 00 00 51 21 00 00 51 21 00 00     Q!..Q!..Q!..Q!..
    204c:	51 21 00 00 51 21 00 00 51 21 00 00 51 21 00 00     Q!..Q!..Q!..Q!..
    205c:	51 21 00 00 51 21 00 00 51 21 00 00 51 21 00 00     Q!..Q!..Q!..Q!..
    206c:	51 21 00 00 51 21 00 00 51 21 00 00 51 21 00 00     Q!..Q!..Q!..Q!..
    207c:	51 21 00 00 51 21 00 00 51 21 00 00 51 21 00 00     Q!..Q!..Q!..Q!..
    208c:	51 21 00 00 51 21 00 00 00 00 00 00 00 00 00 00     Q!..Q!..........
    209c:	51 21 00 00 51 21 00 00 51 21 00 00 51 21 00 00     Q!..Q!..Q!..Q!..
    20ac:	51 21 00 00 00 00 00 00                             Q!......

000020b4 <__do_global_dtors_aux>:
    20b4:	b510      	push	{r4, lr}
    20b6:	4c06      	ldr	r4, [pc, #24]	; (20d0 <__do_global_dtors_aux+0x1c>)
    20b8:	7823      	ldrb	r3, [r4, #0]
    20ba:	2b00      	cmp	r3, #0
    20bc:	d107      	bne.n	20ce <__do_global_dtors_aux+0x1a>
    20be:	4b05      	ldr	r3, [pc, #20]	; (20d4 <__do_global_dtors_aux+0x20>)
    20c0:	2b00      	cmp	r3, #0
    20c2:	d002      	beq.n	20ca <__do_global_dtors_aux+0x16>
    20c4:	4804      	ldr	r0, [pc, #16]	; (20d8 <__do_global_dtors_aux+0x24>)
    20c6:	e000      	b.n	20ca <__do_global_dtors_aux+0x16>
    20c8:	bf00      	nop
    20ca:	2301      	movs	r3, #1
    20cc:	7023      	strb	r3, [r4, #0]
    20ce:	bd10      	pop	{r4, pc}
    20d0:	20000000 	.word	0x20000000
    20d4:	00000000 	.word	0x00000000
    20d8:	00002424 	.word	0x00002424

000020dc <frame_dummy>:
    20dc:	4b04      	ldr	r3, [pc, #16]	; (20f0 <frame_dummy+0x14>)
    20de:	b510      	push	{r4, lr}
    20e0:	2b00      	cmp	r3, #0
    20e2:	d003      	beq.n	20ec <frame_dummy+0x10>
    20e4:	4903      	ldr	r1, [pc, #12]	; (20f4 <frame_dummy+0x18>)
    20e6:	4804      	ldr	r0, [pc, #16]	; (20f8 <frame_dummy+0x1c>)
    20e8:	e000      	b.n	20ec <frame_dummy+0x10>
    20ea:	bf00      	nop
    20ec:	bd10      	pop	{r4, pc}
    20ee:	46c0      	nop			; (mov r8, r8)
    20f0:	00000000 	.word	0x00000000
    20f4:	20000004 	.word	0x20000004
    20f8:	00002424 	.word	0x00002424

000020fc <_delay_init>:
    20fc:	4b02      	ldr	r3, [pc, #8]	; (2108 <_delay_init+0xc>)
    20fe:	4a03      	ldr	r2, [pc, #12]	; (210c <_delay_init+0x10>)
    2100:	605a      	str	r2, [r3, #4]
    2102:	2205      	movs	r2, #5
    2104:	601a      	str	r2, [r3, #0]
    2106:	4770      	bx	lr
    2108:	e000e010 	.word	0xe000e010
    210c:	00ffffff 	.word	0x00ffffff

00002110 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    2110:	b570      	push	{r4, r5, r6, lr}
	uint32_t buf = cycles;

	while (n--) {
		SysTick->LOAD = 0xFFFFFF;
		SysTick->VAL  = 0xFFFFFF;
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    2112:	2580      	movs	r5, #128	; 0x80
	uint8_t  n   = cycles >> 24;
    2114:	0e0b      	lsrs	r3, r1, #24
    2116:	4a0c      	ldr	r2, [pc, #48]	; (2148 <_delay_cycles+0x38>)
		SysTick->LOAD = 0xFFFFFF;
    2118:	4c0c      	ldr	r4, [pc, #48]	; (214c <_delay_cycles+0x3c>)
	uint8_t  n   = cycles >> 24;
    211a:	b2d8      	uxtb	r0, r3
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    211c:	026d      	lsls	r5, r5, #9
	while (n--) {
    211e:	3801      	subs	r0, #1
    2120:	b2c0      	uxtb	r0, r0
    2122:	28ff      	cmp	r0, #255	; 0xff
    2124:	d10a      	bne.n	213c <_delay_cycles+0x2c>
    2126:	0618      	lsls	r0, r3, #24
    2128:	1a1b      	subs	r3, r3, r0
    212a:	1859      	adds	r1, r3, r1
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
	SysTick->VAL  = buf;
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    212c:	2380      	movs	r3, #128	; 0x80
	SysTick->LOAD = buf;
    212e:	6051      	str	r1, [r2, #4]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    2130:	025b      	lsls	r3, r3, #9
	SysTick->VAL  = buf;
    2132:	6091      	str	r1, [r2, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    2134:	6811      	ldr	r1, [r2, #0]
    2136:	4219      	tst	r1, r3
    2138:	d0fc      	beq.n	2134 <_delay_cycles+0x24>
		;
}
    213a:	bd70      	pop	{r4, r5, r6, pc}
		SysTick->LOAD = 0xFFFFFF;
    213c:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    213e:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    2140:	6816      	ldr	r6, [r2, #0]
    2142:	422e      	tst	r6, r5
    2144:	d0fc      	beq.n	2140 <_delay_cycles+0x30>
    2146:	e7ea      	b.n	211e <_delay_cycles+0xe>
    2148:	e000e010 	.word	0xe000e010
    214c:	00ffffff 	.word	0x00ffffff

00002150 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2150:	e7fe      	b.n	2150 <Dummy_Handler>
	...

00002154 <Reset_Handler>:
	if (pSrc != pDest) {
    2154:	4821      	ldr	r0, [pc, #132]	; (21dc <Reset_Handler+0x88>)
    2156:	4922      	ldr	r1, [pc, #136]	; (21e0 <Reset_Handler+0x8c>)
{
    2158:	b570      	push	{r4, r5, r6, lr}
    215a:	2300      	movs	r3, #0
	if (pSrc != pDest) {
    215c:	4288      	cmp	r0, r1
    215e:	d135      	bne.n	21cc <Reset_Handler+0x78>
		*pDest++ = 0;
    2160:	2100      	movs	r1, #0
    2162:	4b20      	ldr	r3, [pc, #128]	; (21e4 <Reset_Handler+0x90>)
	for (pDest = &_szero; pDest < &_ezero;) {
    2164:	4a20      	ldr	r2, [pc, #128]	; (21e8 <Reset_Handler+0x94>)
    2166:	4293      	cmp	r3, r2
    2168:	d335      	bcc.n	21d6 <Reset_Handler+0x82>
	SCB->VTOR = ((uint32_t)pSrc & SCB_VTOR_TBLOFF_Msk);
    216a:	22ff      	movs	r2, #255	; 0xff
    216c:	4b1f      	ldr	r3, [pc, #124]	; (21ec <Reset_Handler+0x98>)
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    216e:	2103      	movs	r1, #3
	SCB->VTOR = ((uint32_t)pSrc & SCB_VTOR_TBLOFF_Msk);
    2170:	4393      	bics	r3, r2
    2172:	4a1f      	ldr	r2, [pc, #124]	; (21f0 <Reset_Handler+0x9c>)
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2174:	250c      	movs	r5, #12
	SCB->VTOR = ((uint32_t)pSrc & SCB_VTOR_TBLOFF_Msk);
    2176:	6093      	str	r3, [r2, #8]
	SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    2178:	2202      	movs	r2, #2
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    217a:	2408      	movs	r4, #8
	DMAC->QOSCTRL.bit.DQOS   = 2;
    217c:	2630      	movs	r6, #48	; 0x30
	SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    217e:	4b1d      	ldr	r3, [pc, #116]	; (21f4 <Reset_Handler+0xa0>)
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2180:	481d      	ldr	r0, [pc, #116]	; (21f8 <Reset_Handler+0xa4>)
	SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    2182:	625a      	str	r2, [r3, #36]	; 0x24
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2184:	78c3      	ldrb	r3, [r0, #3]
    2186:	438b      	bics	r3, r1
    2188:	4313      	orrs	r3, r2
    218a:	70c3      	strb	r3, [r0, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    218c:	78c3      	ldrb	r3, [r0, #3]
    218e:	43ab      	bics	r3, r5
    2190:	4323      	orrs	r3, r4
    2192:	70c3      	strb	r3, [r0, #3]
	DMAC->QOSCTRL.bit.DQOS   = 2;
    2194:	4b19      	ldr	r3, [pc, #100]	; (21fc <Reset_Handler+0xa8>)
    2196:	7b98      	ldrb	r0, [r3, #14]
    2198:	43b0      	bics	r0, r6
    219a:	0006      	movs	r6, r0
    219c:	2020      	movs	r0, #32
    219e:	4330      	orrs	r0, r6
    21a0:	7398      	strb	r0, [r3, #14]
	DMAC->QOSCTRL.bit.FQOS   = 2;
    21a2:	7b98      	ldrb	r0, [r3, #14]
    21a4:	43a8      	bics	r0, r5
    21a6:	4304      	orrs	r4, r0
    21a8:	739c      	strb	r4, [r3, #14]
	DMAC->QOSCTRL.bit.WRBQOS = 2;
    21aa:	7b98      	ldrb	r0, [r3, #14]
    21ac:	4388      	bics	r0, r1
    21ae:	4302      	orrs	r2, r0
    21b0:	739a      	strb	r2, [r3, #14]
	NVMCTRL->CTRLB.bit.MANW = 1;
    21b2:	2380      	movs	r3, #128	; 0x80
    21b4:	4a12      	ldr	r2, [pc, #72]	; (2200 <Reset_Handler+0xac>)
    21b6:	6851      	ldr	r1, [r2, #4]
    21b8:	430b      	orrs	r3, r1
    21ba:	6053      	str	r3, [r2, #4]
	__libc_init_array();
    21bc:	4b11      	ldr	r3, [pc, #68]	; (2204 <Reset_Handler+0xb0>)
    21be:	4798      	blx	r3
	main();
    21c0:	4b11      	ldr	r3, [pc, #68]	; (2208 <Reset_Handler+0xb4>)
    21c2:	4798      	blx	r3
    21c4:	e7fe      	b.n	21c4 <Reset_Handler+0x70>
			*pDest++ = *pSrc++;
    21c6:	58c4      	ldr	r4, [r0, r3]
    21c8:	3304      	adds	r3, #4
    21ca:	6014      	str	r4, [r2, #0]
		for (; pDest < &_erelocate;) {
    21cc:	4c0f      	ldr	r4, [pc, #60]	; (220c <Reset_Handler+0xb8>)
    21ce:	18ca      	adds	r2, r1, r3
    21d0:	42a2      	cmp	r2, r4
    21d2:	d3f8      	bcc.n	21c6 <Reset_Handler+0x72>
    21d4:	e7c4      	b.n	2160 <Reset_Handler+0xc>
		*pDest++ = 0;
    21d6:	c302      	stmia	r3!, {r1}
    21d8:	e7c5      	b.n	2166 <Reset_Handler+0x12>
    21da:	46c0      	nop			; (mov r8, r8)
    21dc:	00002424 	.word	0x00002424
    21e0:	20000000 	.word	0x20000000
    21e4:	20000000 	.word	0x20000000
    21e8:	20000020 	.word	0x20000020
    21ec:	00002000 	.word	0x00002000
    21f0:	e000ed00 	.word	0xe000ed00
    21f4:	410070fc 	.word	0x410070fc
    21f8:	41005000 	.word	0x41005000
    21fc:	41004800 	.word	0x41004800
    2200:	41004000 	.word	0x41004000
    2204:	000023bd 	.word	0x000023bd
    2208:	00002329 	.word	0x00002329
    220c:	20000000 	.word	0x20000000

00002210 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    2210:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
    2212:	4b02      	ldr	r3, [pc, #8]	; (221c <delay_init+0xc>)
    2214:	6018      	str	r0, [r3, #0]
    2216:	4b02      	ldr	r3, [pc, #8]	; (2220 <delay_init+0x10>)
    2218:	4798      	blx	r3
}
    221a:	bd10      	pop	{r4, pc}
    221c:	2000001c 	.word	0x2000001c
    2220:	000020fd 	.word	0x000020fd

00002224 <delay_ms>:
/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    2224:	4b04      	ldr	r3, [pc, #16]	; (2238 <delay_ms+0x14>)
{
    2226:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    2228:	681c      	ldr	r4, [r3, #0]
    222a:	4b04      	ldr	r3, [pc, #16]	; (223c <delay_ms+0x18>)
    222c:	4798      	blx	r3
    222e:	4b04      	ldr	r3, [pc, #16]	; (2240 <delay_ms+0x1c>)
    2230:	0001      	movs	r1, r0
    2232:	0020      	movs	r0, r4
    2234:	4798      	blx	r3
}
    2236:	bd10      	pop	{r4, pc}
    2238:	2000001c 	.word	0x2000001c
    223c:	00002299 	.word	0x00002299
    2240:	00002111 	.word	0x00002111

00002244 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    2244:	4b06      	ldr	r3, [pc, #24]	; (2260 <_pm_init+0x1c>)
    2246:	7a1a      	ldrb	r2, [r3, #8]
    2248:	b2d2      	uxtb	r2, r2
    224a:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    224c:	7a5a      	ldrb	r2, [r3, #9]
    224e:	b2d2      	uxtb	r2, r2
    2250:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    2252:	7a9a      	ldrb	r2, [r3, #10]
    2254:	b2d2      	uxtb	r2, r2
    2256:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    2258:	7ada      	ldrb	r2, [r3, #11]
    225a:	b2d2      	uxtb	r2, r2
    225c:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
    225e:	4770      	bx	lr
    2260:	40000400 	.word	0x40000400

00002264 <_init_chip>:
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    2264:	4b07      	ldr	r3, [pc, #28]	; (2284 <_init_chip+0x20>)

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    2266:	b510      	push	{r4, lr}
    2268:	685a      	ldr	r2, [r3, #4]
    226a:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
    226c:	4b06      	ldr	r3, [pc, #24]	; (2288 <_init_chip+0x24>)
    226e:	4798      	blx	r3
	_sysctrl_init_sources();
    2270:	4b06      	ldr	r3, [pc, #24]	; (228c <_init_chip+0x28>)
    2272:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    2274:	2008      	movs	r0, #8
    2276:	4c06      	ldr	r4, [pc, #24]	; (2290 <_init_chip+0x2c>)
    2278:	47a0      	blx	r4
#endif
	_sysctrl_init_referenced_generators();
    227a:	4b06      	ldr	r3, [pc, #24]	; (2294 <_init_chip+0x30>)
    227c:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    227e:	20f7      	movs	r0, #247	; 0xf7
    2280:	47a0      	blx	r4
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
    2282:	bd10      	pop	{r4, pc}
    2284:	41004000 	.word	0x41004000
    2288:	00002245 	.word	0x00002245
    228c:	000022a1 	.word	0x000022a1
    2290:	000022f1 	.word	0x000022f1
    2294:	000022e1 	.word	0x000022e1

00002298 <_get_cycles_for_ms>:
{
	switch (power) {
	case 8:
		return (ms * (freq / 100000)) * 100;
	case 7:
		return (ms * (freq / 10000)) * 10;
    2298:	23fa      	movs	r3, #250	; 0xfa
    229a:	009b      	lsls	r3, r3, #2
    229c:	4358      	muls	r0, r3
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    229e:	4770      	bx	lr

000022a0 <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    22a0:	4b0d      	ldr	r3, [pc, #52]	; (22d8 <_sysctrl_init_sources+0x38>)
    22a2:	6a1a      	ldr	r2, [r3, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    22a4:	6a19      	ldr	r1, [r3, #32]
	tmp = (tmp & SYSCTRL_OSC8M_CALIB_Msk) >> SYSCTRL_OSC8M_CALIB_Pos;
    22a6:	0112      	lsls	r2, r2, #4

#if CONF_OSC8M_CONFIG == 1
	calib = hri_sysctrl_read_OSC8M_CALIB_bf(hw);

	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    22a8:	0f89      	lsrs	r1, r1, #30
    22aa:	0788      	lsls	r0, r1, #30
	hri_sysctrl_write_OSC8M_reg(hw,
    22ac:	490b      	ldr	r1, [pc, #44]	; (22dc <_sysctrl_init_sources+0x3c>)
    22ae:	0d12      	lsrs	r2, r2, #20
    22b0:	4301      	orrs	r1, r0
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    22b2:	0410      	lsls	r0, r2, #16
	hri_sysctrl_write_OSC8M_reg(hw,
    22b4:	4301      	orrs	r1, r0
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    22b6:	6219      	str	r1, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    22b8:	2102      	movs	r1, #2
    22ba:	6998      	ldr	r0, [r3, #24]
    22bc:	4301      	orrs	r1, r0
    22be:	6199      	str	r1, [r3, #24]
	/* Enable OSC32K anyway since GCLK configuration may need it to sync */
	hri_sysctrl_set_OSC32K_ENABLE_bit(hw);
#endif

#if CONF_OSCULP32K_CONFIG == 1
	hri_sysctrl_write_OSCULP32K_reg(hw,
    22c0:	211f      	movs	r1, #31
    22c2:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    22c4:	771a      	strb	r2, [r3, #28]
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    22c6:	2208      	movs	r2, #8
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    22c8:	68d9      	ldr	r1, [r3, #12]
    22ca:	4211      	tst	r1, r2
    22cc:	d0fc      	beq.n	22c8 <_sysctrl_init_sources+0x28>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    22ce:	2280      	movs	r2, #128	; 0x80
    22d0:	6a19      	ldr	r1, [r3, #32]
    22d2:	430a      	orrs	r2, r1
    22d4:	621a      	str	r2, [r3, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    22d6:	4770      	bx	lr
    22d8:	40000800 	.word	0x40000800
    22dc:	00000302 	.word	0x00000302

000022e0 <_sysctrl_init_referenced_generators>:
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    22e0:	2102      	movs	r1, #2
    22e2:	4a02      	ldr	r2, [pc, #8]	; (22ec <_sysctrl_init_referenced_generators+0xc>)
    22e4:	6993      	ldr	r3, [r2, #24]
    22e6:	438b      	bics	r3, r1
    22e8:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    22ea:	4770      	bx	lr
    22ec:	40000800 	.word	0x40000800

000022f0 <_gclk_init_generators_by_fref>:
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
#if CONF_GCLK_GEN_0_GENEN == 1
	if (bm & (1ul << 0)) {
    22f0:	07c3      	lsls	r3, r0, #31
    22f2:	d509      	bpl.n	2308 <_gclk_init_generators_by_fref+0x18>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
    22f4:	2280      	movs	r2, #128	; 0x80
    22f6:	4b05      	ldr	r3, [pc, #20]	; (230c <_gclk_init_generators_by_fref+0x1c>)
    22f8:	0052      	lsls	r2, r2, #1
    22fa:	609a      	str	r2, [r3, #8]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    22fc:	785a      	ldrb	r2, [r3, #1]
    22fe:	09d2      	lsrs	r2, r2, #7
    2300:	d1fc      	bne.n	22fc <_gclk_init_generators_by_fref+0xc>
	((Gclk *)hw)->GENCTRL.reg = data;
    2302:	2283      	movs	r2, #131	; 0x83
    2304:	0252      	lsls	r2, r2, #9
    2306:	605a      	str	r2, [r3, #4]
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GEN_8_GENEN << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
    2308:	4770      	bx	lr
    230a:	46c0      	nop			; (mov r8, r8)
    230c:	40000c00 	.word	0x40000c00

00002310 <gpio_toggle_pin_level>:
 *
 * \param[in] pin       The pin number for device
 */
static inline void gpio_toggle_pin_level(const uint8_t pin)
{
	_gpio_toggle_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin));
    2310:	221f      	movs	r2, #31
    2312:	2301      	movs	r3, #1
    2314:	4002      	ands	r2, r0
    2316:	4093      	lsls	r3, r2
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
}

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    2318:	22c0      	movs	r2, #192	; 0xc0
    231a:	0940      	lsrs	r0, r0, #5
    231c:	05d2      	lsls	r2, r2, #23
    231e:	01c0      	lsls	r0, r0, #7
    2320:	1880      	adds	r0, r0, r2
    2322:	61c3      	str	r3, [r0, #28]
}
    2324:	4770      	bx	lr
	...

00002328 <main>:
#include <atmel_start.h>
#pragma GCC push_options
#pragma GCC optimize ("O0")
int main(void)
{
    2328:	b580      	push	{r7, lr}
    232a:	b082      	sub	sp, #8
    232c:	af00      	add	r7, sp, #0
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    232e:	4b08      	ldr	r3, [pc, #32]	; (2350 <main+0x28>)
    2330:	4798      	blx	r3
	int i = 5;
    2332:	2305      	movs	r3, #5
    2334:	607b      	str	r3, [r7, #4]
	i = i + 5;
    2336:	687b      	ldr	r3, [r7, #4]
    2338:	3305      	adds	r3, #5
    233a:	607b      	str	r3, [r7, #4]

	/* Replace with your application code */
	while (1) {
		delay_ms(500);
    233c:	23fa      	movs	r3, #250	; 0xfa
    233e:	005b      	lsls	r3, r3, #1
    2340:	0018      	movs	r0, r3
    2342:	4b04      	ldr	r3, [pc, #16]	; (2354 <main+0x2c>)
    2344:	4798      	blx	r3
		gpio_toggle_pin_level(LED1);
    2346:	2011      	movs	r0, #17
    2348:	4b03      	ldr	r3, [pc, #12]	; (2358 <main+0x30>)
    234a:	4798      	blx	r3
		delay_ms(500);
    234c:	e7f6      	b.n	233c <main+0x14>
    234e:	46c0      	nop			; (mov r8, r8)
    2350:	000023b1 	.word	0x000023b1
    2354:	00002225 	.word	0x00002225
    2358:	00002311 	.word	0x00002311

0000235c <delay_driver_init>:
#include <hal_init.h>
#include <hpl_gclk_base.h>
#include <hpl_pm_base.h>

void delay_driver_init(void)
{
    235c:	b510      	push	{r4, lr}
	delay_init(SysTick);
    235e:	4802      	ldr	r0, [pc, #8]	; (2368 <delay_driver_init+0xc>)
    2360:	4b02      	ldr	r3, [pc, #8]	; (236c <delay_driver_init+0x10>)
    2362:	4798      	blx	r3
}
    2364:	bd10      	pop	{r4, pc}
    2366:	46c0      	nop			; (mov r8, r8)
    2368:	e000e010 	.word	0xe000e010
    236c:	00002211 	.word	0x00002211

00002370 <system_init>:

void system_init(void)
{
    2370:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    2372:	4b0b      	ldr	r3, [pc, #44]	; (23a0 <system_init+0x30>)
    2374:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2376:	22c0      	movs	r2, #192	; 0xc0
    2378:	2180      	movs	r1, #128	; 0x80

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    237a:	2080      	movs	r0, #128	; 0x80
    237c:	4b09      	ldr	r3, [pc, #36]	; (23a4 <system_init+0x34>)
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    237e:	05d2      	lsls	r2, r2, #23
    2380:	0289      	lsls	r1, r1, #10
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2382:	05c0      	lsls	r0, r0, #23
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2384:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2386:	6298      	str	r0, [r3, #40]	; 0x28
    2388:	4807      	ldr	r0, [pc, #28]	; (23a8 <system_init+0x38>)
    238a:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    238c:	6151      	str	r1, [r2, #20]
	tmp &= ~PORT_PINCFG_PMUXEN;
    238e:	2101      	movs	r1, #1
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2390:	3351      	adds	r3, #81	; 0x51
    2392:	781a      	ldrb	r2, [r3, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2394:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2396:	701a      	strb	r2, [r3, #0]
	                   // <true"> High
	                   false);

	gpio_set_pin_function(LED1, GPIO_PIN_FUNCTION_OFF);

	delay_driver_init();
    2398:	4b04      	ldr	r3, [pc, #16]	; (23ac <system_init+0x3c>)
    239a:	4798      	blx	r3
}
    239c:	bd10      	pop	{r4, pc}
    239e:	46c0      	nop			; (mov r8, r8)
    23a0:	00002265 	.word	0x00002265
    23a4:	41004400 	.word	0x41004400
    23a8:	c0000002 	.word	0xc0000002
    23ac:	0000235d 	.word	0x0000235d

000023b0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    23b0:	b510      	push	{r4, lr}
	system_init();
    23b2:	4b01      	ldr	r3, [pc, #4]	; (23b8 <atmel_start_init+0x8>)
    23b4:	4798      	blx	r3
}
    23b6:	bd10      	pop	{r4, pc}
    23b8:	00002371 	.word	0x00002371

000023bc <__libc_init_array>:
    23bc:	b570      	push	{r4, r5, r6, lr}
    23be:	2600      	movs	r6, #0
    23c0:	4d0c      	ldr	r5, [pc, #48]	; (23f4 <__libc_init_array+0x38>)
    23c2:	4c0d      	ldr	r4, [pc, #52]	; (23f8 <__libc_init_array+0x3c>)
    23c4:	1b64      	subs	r4, r4, r5
    23c6:	10a4      	asrs	r4, r4, #2
    23c8:	42a6      	cmp	r6, r4
    23ca:	d109      	bne.n	23e0 <__libc_init_array+0x24>
    23cc:	2600      	movs	r6, #0
    23ce:	f000 f819 	bl	2404 <_init>
    23d2:	4d0a      	ldr	r5, [pc, #40]	; (23fc <__libc_init_array+0x40>)
    23d4:	4c0a      	ldr	r4, [pc, #40]	; (2400 <__libc_init_array+0x44>)
    23d6:	1b64      	subs	r4, r4, r5
    23d8:	10a4      	asrs	r4, r4, #2
    23da:	42a6      	cmp	r6, r4
    23dc:	d105      	bne.n	23ea <__libc_init_array+0x2e>
    23de:	bd70      	pop	{r4, r5, r6, pc}
    23e0:	00b3      	lsls	r3, r6, #2
    23e2:	58eb      	ldr	r3, [r5, r3]
    23e4:	4798      	blx	r3
    23e6:	3601      	adds	r6, #1
    23e8:	e7ee      	b.n	23c8 <__libc_init_array+0xc>
    23ea:	00b3      	lsls	r3, r6, #2
    23ec:	58eb      	ldr	r3, [r5, r3]
    23ee:	4798      	blx	r3
    23f0:	3601      	adds	r6, #1
    23f2:	e7f2      	b.n	23da <__libc_init_array+0x1e>
    23f4:	00002410 	.word	0x00002410
    23f8:	00002410 	.word	0x00002410
    23fc:	00002410 	.word	0x00002410
    2400:	00002414 	.word	0x00002414

00002404 <_init>:
    2404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2406:	46c0      	nop			; (mov r8, r8)
    2408:	bcf8      	pop	{r3, r4, r5, r6, r7}
    240a:	bc08      	pop	{r3}
    240c:	469e      	mov	lr, r3
    240e:	4770      	bx	lr

00002410 <__init_array_start>:
    2410:	000020dd 	.word	0x000020dd

00002414 <_fini>:
    2414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2416:	46c0      	nop			; (mov r8, r8)
    2418:	bcf8      	pop	{r3, r4, r5, r6, r7}
    241a:	bc08      	pop	{r3}
    241c:	469e      	mov	lr, r3
    241e:	4770      	bx	lr

00002420 <__fini_array_start>:
    2420:	000020b5 	.word	0x000020b5
